#!/bin/bash
# Script for quickly setting up nodes for cluster suite testing
VG_PATH=/dev/VolGroup00
VG_NAME=VolGroup00
TMPL_NAME=tmpl_cent5-64-0
TMPL_LV_NAME=tmpl_lv
TMPL_LV=/dev/mapper/$VG_NAME-$TMPL_LV_NAME
TMPL_MEM=512
TMPL_ISO_LOC=http://192.168.122.1/disk
TMPL_KS_DEV=eth0
TMPL_KS_IP=192.168.122.48
TMPL_KS_NM=255.255.255.0
TMPL_KS_GW=192.168.122.1
TMPL_KS_CFG=http://192.168.122.1/tmpl_ks.cfg

function usage(){
    echo "You fucked up. Start over"
}

function get_response(){
    read -p "Should I proceed? [y/n] " yn
    case $yn in
        [Yy]*) 
            return;;
        [Nn]*) 
            exit;;
        *) 
            echo "That makes no sense"
            exit;;
    esac
}

function destroy_vm(){
  VM_TO_DESTROY=$1

  VM_EXISTS=$(virsh list --all | grep $VM_TO_DESTROY | wc -l)
    if [ $VM_EXISTS == 1 ]
      then
      VM_STATE=$(virsh list --all | grep $VM_TO_DESTROY | awk '{print $3}')
      if [ $VM_STATE == 'running' ]
        then
        virsh destroy $VM_TO_DESTROY
      fi
      virsh undefine $VM_TO_DESTROY
    fi

}

function mktemplate(){
    echo "This will wipe out any previously created template."

    get_response
    
    destroy_vm $TMPL_NAME

    if [ -e $TMPL_LV ]
      then
      lvremove -f $TMPL_LV
    fi

    lvcreate -L +10G -n $TMPL_LV_NAME $VG_NAME

    virt-install --accelerate --hvm --name $TMPL_NAME \
    --connect qemu:///system --ram=$TMPL_MEM --disk path=$TMPL_LV \
    --network network:default --vnc -l $TMPL_ISO_LOC \
    --extra-args="ks=$TMPL_KS_CFG ksdevice=$TMPL_KS_DEV ip=$TMPL_KS_IP netmask=$TMPL_KS_NM gateway=$TMPL_KS_GW"

}

function mknodes(){
    echo "This will destroy any currently existing nodes"
    get_response
    for i in $(seq 3)
      do
        destroy_vm node$i

	if [ -e $VG_PATH/node$i ]
	  then
           lvremove -f $VG_PATH/node$i
        fi

        lvcreate --snapshot --size 1G --name node$i $VG_PATH/$TMPL_LV_NAME

        fix_node node$i

      done
}

function fix_node(){
  NODE_TO_FIX=$1
  MNT_POINT=/mnt/$NODE_TO_FIX

  kpartx -av $VG_PATH/$NODE_TO_FIX
  pvscan
  vgchange -ay

  mkdir $MNT_POINT

  mount /dev/vg0/lv0 /mnt/$NODE_TO_FIX


  echo "weeeeeeeeeeeeeeeeeeeeeee"
  ls -l $MNT_POINT
  # magic...

  umount $MNT_POINT
  vgchange -an
  kpartx -d $VG_PATH/$NODE_TO_FIX
  rmdir /mnt/$NODE_TO_FIX
}

# script requires an argument
if [ -z "$@" ]; then
  echo "Script requires an argument"
  usage
fi

# parse args
while getopts ":tnc" arg; do
  case $arg in
    t)
      mktemplate
      ;;
    n)
      mknodes
      ;;
    c)
      mkclean
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
    *)
      echo "You got me pal." >&2
      usage
      exit 1
      ;;
  esac
done
